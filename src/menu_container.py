from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button

from kivy.garden.navigationdrawer import NavigationDrawer

from kivy.core.window import Window

from kivy.clock import Clock
from kivy.vector import Vector


class InterfaceConstruct(NavigationDrawer):
    def __init__(self, screens = None, screenNames = None , **kwargs):
        # Contructor stores context of mainscreen as a dictionary of class objects
        # It uses this dictionary to build instances of classes when called on in
        # the sub-menu
        # The sub-menu is generated by a list of keyword names that will be used to
        # search the dictionary object for the class to display.
        super(InterfaceConstruct, self).__init__(**kwargs)

        try:
            self._mainscreenWidget = screens
            self._subscreen = screenNames

        except:
            print('Failed to initial list/dictionary...')

        scrollable = ScrollView()                       #set up a scrollable navigation bar
        buttonContainer = GridLayout(
            cols=1,
            pos=(0, 0),
            size_hint_y=None
        )
        buttonContainer.bind(minimum_height=buttonContainer.setter('height'))

        title = Label(
            text='Table of Contents',
            size_hint_y=None,
            height=100
        )
        buttonContainer.add_widget(title)

        for name in self._subscreen:
            b = Button(
                text=name,
                size_hint_y=None,
                height=200
            )
            b.bind(on_press=self.change_main)
            buttonContainer.add_widget(b)
        scrollable.add_widget(buttonContainer)
        self.add_widget(scrollable)


    def change_main(self, *args):
        try:
            screen = self._mainscreenWidget.get(args[0].text)()
            self.set_main_panel(screen)
        except Exception as error:
            print(error)


class IntroApp(App):
    def build(self):
        display = {str(i): Label(text=str(i) + 'has been generated') for i in range(0, 10)}
        nameList = [str(i) for i in range(0, 10)]
        sidemenu = InterfaceConstruct(screens=display, screenNames=nameList)

        return sidemenu


if __name__ == '__main__':
    IntroApp().run()
